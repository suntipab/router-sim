/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simrouter;

import java.io.*;
import static java.lang.System.exit;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 * @author บักคุณท่าน เพ้ง อิอิ
 */
public class Router extends javax.swing.JFrame {

    /**
     * Creates new form remote
     *
     * @throws java.lang.InterruptedException
     */
    public Router() throws InterruptedException {
        initComponents();
        serverRouterStart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pingStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("STATUS"));

        pingStatus.setEditable(false);
        pingStatus.setColumns(20);
        pingStatus.setRows(5);
        jScrollPane2.setViewportView(pingStatus);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Router.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Router.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Router.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Router.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Router().setVisible(true);
            } catch (InterruptedException ex) {
                Logger.getLogger(Router.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea pingStatus;
    // End of variables declaration//GEN-END:variables

    ServerSocket serverRouter;
    int portServer = 1519;
    public ArrayList<Socket> list_sockets = new ArrayList<>();
    public ArrayList<Integer> list_client_states = new ArrayList<>();
    public ArrayList<String[]> list_com = new ArrayList<>();
    public DefaultListModel list_clients_model;

    private void serverRouterStart() {
        try {
            serverRouter = new ServerSocket(portServer);
            new Thread(accept).start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Port ถูกใช้งานอยู่", "เชื่อมต่อไม่ได้", WIDTH);
            exit(0);
        }

    }
    private Runnable accept = new Runnable() {

        @Override
        public void run() {
            //new Thread(send).start();
            //new Thread(receive).start();
            while (true) {
                try {
                    Socket socket = serverRouter.accept();
                    receive(socket);
                    list_sockets.add(socket);
                } catch (Exception ex) {
                    Logger.getLogger(Router.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    };

    public void send() {
        ObjectOutputStream oos;
        String[] out = new String[list_com.size()];
        for (int i = 0; i < list_com.size(); i++) {
            String[] outin = list_com.get(i);
            out[i] = outin[0];
        }
        for (int i = 0; i < list_sockets.size(); i++) {
            try {
                oos = new ObjectOutputStream(list_sockets.get(i).getOutputStream());
                oos.writeObject(out);
            } catch (Exception ex) {

                disconnectClient(i);
            }
        }
    }
    Queue queueRemove = new LinkedList();
    void receive(Socket socket) {
        new Thread(() -> {
            ObjectInputStream ois;
            String[] dp;
            String pcName = null;
            while (true) {
                try {
                    ois = new ObjectInputStream(socket.getInputStream());
                    dp = (String[]) ois.readObject();
                    StringBuilder sb;
                    switch (dp[0]) {
                        case "start":
                            pcName = dp[1];
                            list_com.add(new String[]{pcName, dp[2]});
                            send();
                            break;
                        case "ping":
                            sb = new StringBuilder();
                            sb.append("Source IP address: ").append(dp[2]).append("\n");
                            for (int i = 0; i < list_com.size(); i++) {
                                if (dp[3].equals((list_com.get(i))[0])) {
                                    sb.append("Detination IP address: ").append((list_com.get(i))[1]).append("\n");
                                    break;
                                }
                            }
                            if (!dp[4].equals("")) {
                                sb.append("MGS: ").append(dp[4]).append("\n");
                            }
                            pingStatus.append(sb.toString());
                            queueRemove.add(sb.toString().length());
                            new Thread(() -> {
                        try {
                            Thread.sleep(5000);
                            pingStatus.replaceRange(null, 0, (int) queueRemove.remove());
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Router.class.getName()).log(Level.SEVERE, null, ex);
                        }
                            }).start();
                            break;
                    }

                } catch (IOException | ClassNotFoundException ex) // Client Disconnected (Client Didn't Notify Server About Disconnecting)
                {
                    disconnectClient(pcName);
                    break;
                }
            }

        }).start();
    }

    public void disconnectClient(int index) {
        try {
            list_com.remove(index);
            list_sockets.remove(index);
            send();
        } catch (Exception ex) {
            Logger.getLogger(Router.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void disconnectClient(String pcName) {
        try {
            for (int i = 0; i < list_com.size(); i++) {
                if (pcName.equals((list_com.get(i))[0])) {
                    list_com.remove(i);
                    list_sockets.remove(i);
                    send();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Router.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
